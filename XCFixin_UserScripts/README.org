* User Scripts Fixin

The fixin adds a new =Scripts= menu to Xcode 4.x. It works a little
bit like the Xcode 3.x one.

* Adding scripts

The Scripts fixin looks in =~/Library/Application
Support/Developer/Shared/Xcode/scripts/= for executable files, or
symlinks to them. Any it finds have their names added to the new
=Scripts= menu. 

* Running scripts

Select script from the menu, and the script runs. The current
selection is passed to the script as its standard input.

If the script's exit code is 0, the script's standard output replaces
the current selection.

If the script's exit code is anything else, an alert box is shown with
the first 1K or so of the script's standard error output.

* Setting selection from a script

Print the string =%%%{PBXSelection}%%%= to set the selection point.

If this string appears once, the cursor is positioned at that point.

If the string appears more than once, the text between the first two
occurrences is selected.

* Refreshing scripts

At the bottom of the Scripts menu, there's an option =Refresh=. This
re-reads the contents of the scripts directory, re-reads the script
options (see below), and rebuilds the menu. So if you change the
script options, or add or remove scripts, just select the =Refresh=
option.

* Script options

You can add script options (including key equivalents) to your scripts
by adding a file called =scripts.xml= in your scripts folder. It is an
XML-style properly list, and it goes a bit like this:

#+BEGIN_EXAMPLE
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>Test Script</key>
	<dict>
	  <key>keyEquivalent</key>
	  <string>C-M-5</string>
	</dict>
	<key>Insert Separator</key>
	<dict>
	  <key>keyEquivalent</key>
	  <string>C-M-/</string>
	</dict>
</dict>
</plist>
#+END_EXAMPLE

The key for the top-level dict is the name of the script (as shown on
the menu), and each value is another dict holding script-specific
options. Each script-specific option has a key, the option name, and a
string value.

The current option names are:

- =keyEquivalent= :: value is the key equivalent in emacs notation,
     modifier keys first (=C= for Control, =M= for Option, =s= for
     Command, =S= for Shift), separated by =-=, then the key name.

     (For example, =C-M-5= is Ctrl-Option-5. =s-C= is Command-C. etc.)

     (The key name is passed verbatim to =-[NSMenuItem
     setKeyEquivalent]=; I don't know what the full set of valid keys
     might be.)

- =stdinMode= :: value is string dictating what is used as script's
                 stdin, with valid options being:
		 - =none= :: no data sent
		 - =selection= (default) :: selection is used; no data
                      sent if no selection
		 - =line= :: current line (including line ending
                             char(s)) sent
		 - =linetext= :: current line (excluding line ending
                                 char(s)) sent
		 - =linetextOrSelection= :: selection is used, if any;
		      otherwise, as per =linetext=
                 - =lineOrSelection= :: selection is used, if any;
		      otherwise, as per =line=

- =reselectMode= :: value is string indicating how the selection
                    should be reinstated after the script has run,
                    with valid options being:
		    - =none= :: nothing is selected.
		    - =all= :: all script output is selected.
		    - =marker= (default) :: selection is set according
                         to =%%%{PBXSelection}%%%= markers in output.

* Misfeatures

- If you work in a language that uses non-Latin letters, you might not
  have to look very far to find key equivalents that the fixin won't
  accept.

- The key equivalent emacs notation 'thing' is lame and I need to find
  some better way of doing it.

- If you run a script on text that includes the string
  "%%%{PBXSelection}%%%", that string will disappear. (Presumably this
  happened in Xcode3 too?)

- No support for column select.
  
